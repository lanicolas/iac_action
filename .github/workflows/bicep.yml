# This is a basic workflow to help you get started with Actions

name: bicep-build

# Controls when the action will run. 
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        default: 'iac'
      resourceGroup:
        description: 'Resource group name'
        required: true
        default: 'iac'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-vm:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment }}

    outputs:
          ip: ${{ steps.create-vm.outputs.ipaddr }}
          
  build-template:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Bicep Build
        id: bicep-build
        uses: aliencube/bicep-build-actions@v0.3
        with:
          files: template/template.bicep
      - name: Check the result
        shell: bash
        run: |
          shopt -s globstar
          ls -altR **/template*.*
      - name: Upload template as artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: template
          path: "**/template*.json"

  create-vm:
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment }}
    
    needs: [build-vm, build-template]
    
    steps:
      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds:  ${{ secrets.AZURE_CREDENTIALS }}          
      
      - name: Create VM From Image
        id: create-vm-from-image
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |                       
            groupName="app-vm-grp-${{ GITHUB.RUN_NUMBER }}"
            region="northeurope"

            az group create -n $groupName -l $region
            
            if [ '${{ github.event.inputs.dist-type }}' = 'VHD' ]; then
              image=$(echo "${{ needs.build-vm.outputs.imageUri }}"  | cut -d "?" -f1)
              imageId=$(az image create --name "img-${{ GITHUB.RUN_NUMBER }}" --resource-group $groupName --source $image --os-type Linux --storage-sku Standard_LRS --hyper-v-generation V2 --query id -o tsv)
            else
              imageId="${{ needs.build-vm.outputs.imageUri }}"
            fi
            
            ipaddr=$(az vm create --resource-group $groupName --name "app-vm-${{ GITHUB.RUN_NUMBER }}" --admin-username azureadmin --generate-ssh-keys --location $region \
            --image $imageId --public-ip-address-allocation dynamic --query publicIpAddress -o tsv)
            
            az vm open-port --port 80 -n "app-vm-${{ GITHUB.RUN_NUMBER }}" -g $groupName
            echo "::set-output name=ipaddress::$ipaddr"
            
      - name: Test VM connectivity    
        run: |
            echo "Deployment finished. Checking ${{ steps.create-vm-from-image.outputs.ipaddress }} output"
            echo -n "Warm up wait..."
            sleep 15
            echo "calling http endpoint.."
            curl http://${{ steps.create-vm-from-image.outputs.ipaddress }}            
      

